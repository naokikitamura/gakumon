= 学問への扉：計算機プログラミング入門

== 課題

自分のゲームをつくっていこう．

基本的には，既存のプログラムを変更すればよい．
絵をつける，音をつける，とかでもOK．

pyxelオフィシャルのサンプルプログラムも是非参考に．

作りたいゲームがあるが，取っ掛かりがつかめない場合は，要相談．

CLEに１，２行でよいので，今日までにできたこと，と，残り時間で行うことを記入．
←*できるだけ授業時間中に!*

== 前回の質問があった点

=== 音楽をつける方法

pyxel.play(x, y)とpyxel.playm(x, loop = t)を使う．

pyxel.play(x,y)はチャンネルxにサウンドyを流す．

pyxel.playm(x, loop = t)はサウンドxを鳴らす．
t=Trueの時はループ再生し，Falseの時はループしない．

ループを止めるにはpyxel.stop()を使う．

.jump_sound.py
[source,python]
----
import pyxel
pyxel.init(256, 256)


pyxel.load("my_resource.pyxres")  # データファイル読込



class Player:
    def __init__(self):
        self.y = 150
        self.vy = 0

    def update(self):
        self.y = min(150, self.y + self.vy)
        self.vy = self.vy + 1
        if self.y == 150 and pyxel.btnp(pyxel.KEY_SPACE):
            #ジャンプの時に音を鳴らす
            pyxel.play(2, 0)  # チャンネル2にSOUND 0を流す
            self.vy = -10

    def draw(self):
        pyxel.rectb(200, self.y, 16, 16, 15)


class Can:
    def __init__(self, x, vx):
        self.x = x
        self.vx = vx

    def update(self):
        self.x = self.x + self.vx
        if self.x > 256:
            self.x = -20

    def draw(self):
        pyxel.rectb(self.x, 150, 16, 16, 12)


class Block:
    def __init__(self, x, col):
        self.x = x
        self.col = col

    def update(self):
        self.x = self.x + 4
        if self.x >= 256:
            self.x = -64

    def draw(self):
        pyxel.rectb(self.x, 166, 64, 16, self.col)


player = Player()
cans = [Can(-100, 5), Can(-250, 8)]
state = "GAMEOVER"
life = 20
blocks = [Block(0, 1), Block(64, 2), Block(128, 1),
          Block(192, 2), Block(-64, 1)]


def update():
    global player, cans, state, life
    if state == "GAMEOVER":
        if pyxel.btnp(pyxel.KEY_SPACE):
            # ゲーム背景の音楽をループして鳴らす(music 0)
            pyxel.playm(0, loop=True)
            state = "PLAYING"
            life = 20
    else:
        player.update()
        for can in cans:
            can.update()
            if can.x - 10 < 200 < can.x + 10 and \
                    140 <= player.y <= 150:
                life = life - 1
                break
        if life == 0:
            #ゲームオーバー時に音を止める
            pyxel.stop()
            state = "GAMEOVER"
        for block in blocks:
            block.update()


def draw():
    global player, cans, state, life
    pyxel.cls(0)
    player.draw()
    for can in cans:
        can.draw()
    pyxel.text(0, 0, str(life), 10)
    for block in blocks:
        block.draw()

pyxel.run(update, draw)

----

=== 難易度設定とジャンプゲームの障害物を上下に出現するようにする

Hボタンを押してゲームを始めると高い位置にも缶を出すように変更．缶とプレイヤーの当たり判定に缶のy座標を利用するように変更した．

.jump_hard.py
[source,python]
----
import pyxel
pyxel.init(256, 256)



class Player:
    def __init__(self):
        self.y = 150
        self.vy = 0

    def update(self):
        self.y = min(150, self.y + self.vy)
        self.vy = self.vy + 1
        if self.y == 150 and pyxel.btnp(pyxel.KEY_SPACE):
            self.vy = -10

    def draw(self):
        pyxel.rectb(200, self.y, 16, 16, 15)


class Can:
    #y座標も受け取るように設定
    def __init__(self, x, y, vx):
        self.x = x
        self.y = y
        self.vx = vx

    def update(self):
        self.x = self.x + self.vx
        if self.x > 256:
            self.x = -20

    def draw(self):
        pyxel.rectb(self.x, self.y, 16, 16, 12)


class Block:
    def __init__(self, x, col):
        self.x = x
        self.col = col

    def update(self):
        self.x = self.x + 4
        if self.x >= 256:
            self.x = -64

    def draw(self):
        pyxel.rectb(self.x, 166, 64, 16, self.col)


player = Player()
cans = [Can(-100, 150, 5), Can(-250, 150, 8)] #y座標の追加
state = "GAMEOVER"
life = 20
blocks = [Block(0, 1), Block(64, 2), Block(128, 1),
          Block(192, 2), Block(-64, 1)]


def update():
    global player, cans, state, life
    if state == "GAMEOVER":
        if pyxel.btnp(pyxel.KEY_SPACE):
            state = "PLAYING"
            life = 20
            cans = [Can(-100, 150, 5), Can(-250, 150, 8)]
        elif pyxel.btnp(pyxel.KEY_H): #Hard用の初期設定
            state = "PLAYING"
            life = 20
            cans = [ Can(-100, 150, 5), Can(-250, 150, 8), Can(-50, 110, 10), Can(-60, 110, 4)]
    else:
        player.update()
        for can in cans:
            can.update()
            if can.x - 10 < 200 < can.x + 10 and \
                    can.y -10 <= player.y <= can.y + 10: #y座標の当たり判定を缶の高さになるように変更
                life = life - 1
                break
        if life == 0:
            state = "GAMEOVER"
        for block in blocks:
            block.update()


def draw():
    global player, cans, state, life
    pyxel.cls(0)
    player.draw()
    for can in cans:
        can.draw()
    pyxel.text(0, 0, str(life), 10)
    for block in blocks:
        block.draw()

pyxel.run(update, draw)
----
