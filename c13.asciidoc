= 学問への扉：計算機プログラミング入門



== 課題

自分のゲームをつくっていこう．

基本的には，既存のプログラムを変更すればよい．
絵をつける，音をつける，とかでもOK．

pyxelオフィシャルのサンプルプログラムも是非参考に．

作りたいゲームがあるが，取っ掛かりがつかめない場合は，要相談．

CLEに１，２行でよいので，今日までにできたこと，と，残り時間で行うことを記入．
←*できるだけ授業時間中に!*

== 今後の予定

7/14(金) ゲーム作り

7/21(金) ゲーム作り・資料作り

7/28(金) 発表会


== 発表会について

=== 7/28は発表会

- 作成した発表用の資料（パワーポイントなどのファイル）は，7/27の正午までにCLEにアップロードすること．
- 7/28は，パワーポイントをつかってプレゼンする．

当日アップロードしたファイルをダウンロードして，PCにいれておきますので，
それを使ってプレゼンしてください．

- 時間は，1人3分程度（質問があれば1分程度）．

=== スライド

* プレゼン資料（スライド）のサンプル
https://github.com/naokikitamura/gakumon/blob/main/meteo.pptx


== 前回の質問があった点

=== ゲームモードの選択はどのようにしたらできるのか
第11回のプログラムを変更し，タイトル画面でゲームのモードを選択するクラスGameModeを新たに追加．また，難易度に応じてキャラクターのジャンプ力を変化させた．

game_mode.py
[source,python]
----
import pyxel
pyxel.init(256, 256)



class Player:
    def __init__(self):
        self.y = 150
        self.vy = 0

    def update(self,gamemode):
        self.y = min(150, self.y + self.vy)
        self.vy = self.vy + 1
        if self.y == 150 and pyxel.btnp(pyxel.KEY_SPACE):
            #game modeによってジャンプ力を変える
            if gamemode.state=="NORMAL":
                self.vy = -10
            else:
                self.vy = -15

    def draw(self):
        pyxel.rectb(200, self.y, 16, 16, 15)


class Can:
    #y座標も受け取るように設定
    def __init__(self, x, y, vx):
        self.x = x
        self.y = y
        self.vx = vx

    def update(self):
        self.x = self.x + self.vx
        if self.x > 256:
            self.x = -20

    def draw(self):
        pyxel.rectb(self.x, self.y, 16, 16, 12)


class Block:
    def __init__(self, x, col):
        self.x = x
        self.col = col

    def update(self):
        self.x = self.x + 4
        if self.x >= 256:
            self.x = -64

    def draw(self):
        pyxel.rectb(self.x, 166, 64, 16, self.col)

#Gameモードを決めるクラス
class GameMode:
    def  __init__(self):
        self.state = "NORMAL"
    def update(self):
        if pyxel.btnp(pyxel.KEY_DOWN):
            self.state="HARD"
        if pyxel.btnp(pyxel.KEY_UP):
            self.state="NORMAL"

    def draw(self):
        pyxel.text(10,20,"jump game",7)
        pyxel.text(10,35,"hard",7)
        pyxel.text(10,30,"normal",7)
        if self.state=="HARD":
            pyxel.rectb(2,35,4,4,7)
        else:
            pyxel.rectb(2,30,4,4,7)

player = Player()
cans = [Can(-100, 150, 5), Can(-250, 150, 8)] #y座標の追加
state = "GAMEOVER"
life = 20
blocks = [Block(0, 1), Block(64, 2), Block(128, 1),
          Block(192, 2), Block(-64, 1)]
#Gameモード用のクラスの初期化
gamemode = GameMode()


def update():
    global player, cans, state, life, gamemode
    if state == "GAMEOVER":
        gamemode.update()
        if pyxel.btnp(pyxel.KEY_SPACE):
            if gamemode.state=="NORMAL":
                state = "PLAYING"
                life = 20
                cans = [Can(-100, 150, 5), Can(-250, 150, 8)]
            else: #Normal用の初期設定
                state = "PLAYING"
                life = 20
                cans = [ Can(-100, 150, 5), Can(-250, 150, 8), Can(-50, 110, 10), Can(-60, 110, 4)]
    else:
        player.update(gamemode)
        for can in cans:
            can.update()
            if can.x - 10 < 200 < can.x + 10 and \
                    can.y -10 <= player.y <= can.y + 10: #y座標の当たり判定を缶の高さになるように変更
                life = life - 1
                break
        if life == 0:
            state = "GAMEOVER"
        for block in blocks:
            block.update()


def draw():
    global player, cans, state, life,gamemode
    pyxel.cls(0)
    player.draw()
    for can in cans:
        can.draw()
    pyxel.text(0, 0, str(life), 10)
    for block in blocks:
        block.draw()
    #ゲームモード選択画面の表示
    if state == "GAMEOVER":
        gamemode.draw()

pyxel.run(update, draw)

----
